(* 
The Formal Whirlwind Language Grammar
-------------------------------------
- This grammar is complex and is technically not LALR(1) in certain locations
  but some adjustments to the parsing algorithm and parser generator allow for
  these conflicts to either be ignored or automatically resolved.
- Indentation is managed by the lexer which produces the tokens INDENT and
  DEDENT to denote changes in the level of indentation (an increase and a
  decrease respectively)
- NEWLINE is as the name would suggest a newline.  However, it does not
  incorporate a carriage return, and it is produced separately from indentation
  changes (ie. DEDENT happens after a NEWLINE).
- All other tokens in all caps are simply special tokens produced by the lexer.
  All tokens in lowercase are just raw strings.  However, all keyword tokens
  assert an implicit word-boundary.   
- The `? ... ?` syntax marks a group that can be optionally wrapped in a block
  (indentation suite - eg. arrays, type definitions, lists, dictionaries).
- No need to specify NEWLINE before every INDENT because a NEWLINE must be there
  in order for an INDENT to be registered and the parser simply ignores
  unexpected newlines (actually less work for everyone).
- The special token '' denotes an epsilon.  Normally, these are only generated
  by constructs like optional blocks during BNF conversion, but there are
  specific cases in which we need to define custom epsilon rules for more
  complex repetition patterns (like those required for arguments) where regular
  repetition would cause an unresolveable shift-reduce conflict.
- There are a number of places in this grammar where constructs like optional
  blocks are avoided because they introduce unresolveable shift-reduce conflicts
  (trying to reduce an epsilon rule).  These places are: ref_type (the global
  tag), ...
*)

(* file is our goal symbol *)
file = {import_stmt} (export_block [top_level] | top_level) ;

import_stmt = 'import' ( package_name ['as' 'IDENTIFIER'] | ( identifier_list | '(' identifier_list ')' ) 'from' package_name ) 'NEWLINE' ;
package_name = 'IDENTIFIER' { '::' 'IDENTIFIER' } | '.' ;

export_block = 'export' 'of' 'INDENT' top_level 'DEDENT' ;

top_level = definition { definition } ;
definition = interf_def | interf_bind | operator_def | func_def | type_def 
  | decorator | annotated_def | variable_decl | special_def ;

interf_def = 'interf' 'IDENTIFIER' [generic_tag] 'of' interf_body ;
interf_bind = 'interf' [generic_tag] 'for' type ['is' type {',' type}] 'of' interf_body ;
interf_body = 'INDENT' interf_member { interf_member } 'DEDENT' ;
interf_member = func_def | special_def | annotated_method ;

operator_def = 'operator' '(' operator_value ')' [generic_tag] signature decl_func_body ;
operator_value = '+' | '-' | '*' | '/' | '//'
  | '**' | '%' | '>' | '>>' | '<' | '<<' | '<=' | '>=' 
  | '==' | '!' | '!=' | '&' | '&&' | '|' | '||' | '^' 
  | '~' | '[' [':'] ']' ;

func_def = ('func' | 'async') 'IDENTIFIER' [generic_tag] signature decl_func_body ;
signature = args_decl [type] ;
args_decl = '(' [arg_decl next_arg_decl | var_arg_decl] ')' ;
next_arg_decl = ',' (arg_decl next_arg_decl | var_arg_decl) | '' ;
arg_decl = ['const'] ['vol'] identifier_list type_ext [initializer] ;
var_arg_decl = '...' 'IDENTIFIER' type_ext ;
decl_func_body = do_block | 'NEWLINE' ['INDENT' '->' expr 'DEDENT'] | '->' expr 'NEWLINE' ;

type_def = ['closed'] 'type' 'IDENTIFIER' [generic_tag] ( ? typeset ? | newtype ) ;
typeset = '=' type {'|' type } ;
newtype = ? alg_suffix ? | struct_suffix ;
alg_suffix = alg_variant {alg_variant} ;
alg_variant = '|' 'IDENTIFIER' [tupled_suffix] ;
tupled_suffix = '(' type {',' type} ')' ;
struct_suffix = ['of' type] '{' struct_member { struct_member } '}' ;
struct_member = ['const'] ['vol'] identifier_list type_ext [initializer] 'NEWLINE' ;

annotated_def = annotation (func_def | type_def | operator_def | interf_def | interf_bind) ;
annotated_method = annotation func_def ;
annotation = '@' (annot_single | '[' annot_single {',' annot_single} ']') 'NEWLINE' ;
annot_single = 'IDENTIFIER' ['(' 'STRINGLIT' {',' 'STRINGLIT'} ')'] ;

(* generic function specialization *)
special_def = 'special' [generic_tag] 'IDENTIFIER' '<' type_list '>' special_func_body ;
special_func_body = do_block | 'INDENT' '->' expr 'DEDENT' | '->' expr 'NEWLINE' ;

(* ellipsis is used to designate a block that hasn't been filled in yet *)
do_block = 'do' block ;
block = 'INDENT' ( block_content {block_content} | '...') 'DEDENT' ;
block_content = simple_stmt 'NEWLINE' | complex_stmt ;

(* complex statements contain a block (eg. an if statement) *)
complex_stmt = if_chain | match_stmt | for_loop | while_loop 
  | ctx_manager | async_for_loop ;

if_chain = 'if' [variable_decl ';'] expr do_block {elif_block} [else_block] ;
elif_block = 'elif' [variable_decl ';'] expr do_block ;
else_block = 'else' (do_block | block) ;

match_stmt = 'match' expr (type_match_block | val_match_block) ;
type_match_block = 'type' 'to' 'INDENT' type_case_block {type_case_block} 'DEDENT' ;
val_match_block = 'to' 'INDENT' val_case_block {val_case_block} 'DEDENT' ;
type_case_block = 'case' type_pattern_list [when_cond] do_block ;
val_case_block = 'case' expr_list [when_cond] do_block ;

for_loop = 'for' iterator do_block [nobreak_clause] ;
async_for_loop = 'async' 'for' iterator do_block [nobreak_clause] ;
while_loop = 'while' [variable_decl ';'] expr do_block [nobreak_clause] ;
nobreak_clause = 'nobreak' (do_block | block) ;

ctx_manager = 'with' ? full_ctx ? do_block [ctx_else_clause] ;
full_ctx = ctx_elem {semilinebr ctx_elem} ;
ctx_elem = identifier_list '<-' expr ;
ctx_else_clause = 'else' (block | do_block | 'match' (expr do_block | val_match_block)) ;

(* simple statements do not contain a block - newline suffix is added in block *)
simple_stmt = 
  break_stmt | continue_stmt | fallthrough_stmt | return_stmt 
  | yield_stmt | expr_stmt | variable_decl ;

break_stmt = 'break' ;
continue_stmt = 'continue';
fallthrough_stmt = 'fallthrough' ['to' 'match'] ;
return_stmt = 'return' [ expr_list ] ;
yield_stmt = 'yield' expr_list ;

variable_decl = ('let' | 'const') ['vol'] ? (unpack_var (type_ext | initializer) | var {',' var} ) ? ;
var = 'IDENTIFIER' [type_ext] [initializer];
unpack_var = '(' unpack_elem next_unpack_elem ')' ;
next_unpack_elem = ',' (unpack_elem next_unpack_elem | '...') | '' ;
unpack_elem = 'IDENTIFIER' | unpack_var ;

expr_stmt = mut_expr {',' mut_expr} [assign_op expr_list | '++' | '--'] ;
mut_expr = ['await'] ['*'] mut_atom {trailer} ;
mut_atom = 'IDENTIFIER' | '(' expr ')' ;
assign_op = ['+' | '-' | '*' | '/' | '%' | '//' | '**' | '>>' | '<<' | '&' | '|' | '^'] '=' ;

expr = match_expr ['if' match_expr 'else' expr ] | closure ;
closure = ['async'] ('||' | '|' [closure_arg {',' closure_arg}] '|' closure_body) ;
closure_arg = ['const'] 'IDENTIFIER' [type_ext] ;
closure_body = do_block | '->' expr ;

match_expr = core_expr ['match' core_expr ] | 'match' core_expr inline_match_suffix ;
inline_match_suffix = 'to' inline_match_expr_block | 'type' 'to' inline_match_type_block ;
inline_match_expr_block = 'INDENT' inline_match_expr_branch {inline_match_expr_branch} 'DEDENT' ;
inline_match_expr_branch = expr_list '->' expr 'NEWLINE' ;
inline_match_type_block = 'INDENT' inline_match_type_branch {inline_match_type_branch} 'DEDENT' ;
inline_match_type_branch = type_pattern_list '->' expr 'NEWLINE' ;

core_expr = ['await'] or_expr [core_expr_suffix] ;
core_expr_suffix = '..' or_expr
  | 'as' type {'as' type}
  | 'is' (type_pattern | '!' type) ;

or_expr = xor_expr {('||' | '|') xor_expr} ;
xor_expr = and_expr {'^' and_expr} ;
and_expr = comp_expr {('&&' | '&') comp_expr} ;
comp_expr = shift_expr {comp_op shift_expr} ;
comp_op = '<' | '>' | '>=' | '<=' | '==' | '!=' ;
shift_expr = arith_expr {('>>' | '<<') arith_expr} ;
arith_expr = term {('+' | '-') term} ;
term = factor {('*' | '/' | '//' | '%') factor} ;
factor = unary_expr {'**' unary_expr} ;
unary_expr = ['&' ['const'] | '*' | '-' | '~'] atom_expr ;

atom_expr = atom {trailer} | make_expr ;
make_expr = 'make' ['const'] alloc_param ;
alloc_param = type ['(' expr ')'];

trailer = '.' ( 'IDENTIFIER' | 'INTLIT' )
  | '[' sub_slice ']'
  | '{' [init_list] '}' 
  | '(' [args_list] ')'
  | '::' ('IDENTIFIER' | '<' type_list '>')
  ;
sub_slice = expr [':' [expr]] | ':' expr ;
init_list = '...' expr {',' init_member_expr} | init_member_expr {',' init_member_expr} ;
init_member_expr = 'IDENTIFIER' '=' expr;
args_list = arg {',' arg} ;
arg = expr ['=' expr] ;

atom = 'INTLIT' | 'STRINGLIT' | 'FLOATLIT' | 'BOOLLIT' | 'RUNELIT' | vector_builder | tupled_expr 
  | array_builder | list_builder| dict_builder| 'IDENTIFIER' | 'null' ;

array_builder = '{' expr_list '}' ;
block_builder = '{' seq_contents '}' ;
list_builder = '[' seq_contents ']' ;
seq_contents = expr ({',' expr} | [comp_suffix]) ;
dict_builder = '{' expr ':' expr ({',' expr ':' expr} | [comp_suffix]) '}' ;
vector_builder = '<' expr [':' 'INTLIT'] '>' ;
tupled_expr = '(' expr {',' expr} ')' ;

(* type constructions *)
type_list = type {',' type} ;
type_ext = ':' type ;
type_pattern_list = type_pattern {',' type_pattern};
type_pattern = 'IDENTIFIER' ':' type | type ;

type = value_type | named_type | ref_type ;

named_type = 'IDENTIFIER' ['::' 'IDENTIFIER'] ['<' type_list '>'];

value_type = prim_type | col_type | vec_type | func_type | tup_type ;
prim_type = 'int' | 'uint' | 'ushort' | 'short' | 'ulong' | 'long' | 'nothing'
  | 'sbyte' | 'byte' | 'string' | 'rune' | 'float' | 'double' | 'bool' | 'any' ;
col_type = '[' type [':' type] ']' | '[' ']' type ;
vec_type = '<' 'INTLIT' '>' ( prim_type | 'IDENTIFIER' ) ;

func_type = ('func' | 'async') '(' [func_type_args] ')' '(' type_list ')' ;
func_type_args = (func_type_arg next_func_type_arg | func_type_var_arg) ;
next_func_type_arg = ',' (func_type_arg next_func_type_arg | func_type_var_arg) | '' ; 
func_type_arg = ['~'] type ;
func_type_var_arg = '...' type ;
tup_type = '(' type ',' type {',' type} ')' ;

ref_type = '&' ['const'] (value_type | named_type) ; 

(* generic constructions *)
generic_tag = '<' generic_param {',' generic_param} '>' ;
generic_param = 'IDENTIFIER' [':' type {'|' type}];

(* iterable constructions *)
comp_suffix = 'for' iterator [when_cond] ;
iterator = iter_var {',' iter_var} 'in' expr ;
iter_var = 'IDENTIFIER' | unpack_var ;

(* other bits and bobs *)
expr_list = expr {',' expr} ;
when_cond = 'when' expr ;
initializer = '=' expr ;
semilinebr = ';' | 'NEWLINE' ;
identifier_list = 'IDENTIFIER' {',' 'IDENTIFIER'} ;
