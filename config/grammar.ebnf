// WHIRLWIND STANDARD GRAMMAR
whirlwind: ( var_decl ';'
| block_decl
| import_stmt ';'
| export_decl
| annotation
)+ ;

main: ( func_decl
| block_stmt 
| stmt
)+ ;

// compiler annotation
annotation: '#' 'IDENTIFIER' ['STRING_LITERAL'] ;

// import statement
import_stmt: 'IMPORT' ( pkg_name ['AS' 'IDENTIFIER'] | import_set 'FROM' pkg_name ) ;
pkg_name: 'IDENTIFIER' static_get* ;
import_set: '{' ( 'IDENTIFIER' (',' 'IDENTIFIER')* | '...' ) '}' ;

// export declaration
export_decl: 'EXPORT' ( block_decl
| import_stmt ';'
| var_decl ';'
| '{' whirlwind '}'
) ;


// BLOCK DECLARATIONS
block_decl: func_decl
| interf_decl
| type_decl
| variant_decl
| decor_decl
| operator_decl
;

// type declaration
type_decl: ['CLOSED'] 'TYPE' 'IDENTIFIER' [generic_tag] ( type_alias | type_set | type_suffix ) ;
type_alias: '=' types ( '|' types )* ;
type_set: '|' type_set_elem ('|' type_set_elem)+ ;
type_set_elem: 'IDENTIFIER' [ type_suffix ] ;
type_suffix: '(' type_list ')' | '{' type_struct_elem (',' type_struct_elem)* '}' ;
type_struct_elem: ['CONST'] ['VOL'] 'IDENTIFIER' (',' 'IDENTIFIER')* extension [initializer] ;

// function declaration
func_decl: ('FUNC' | 'ASYNC') 'IDENTIFIER' [generic_tag] '(' args_decl_list ')' [ types ] ['CONST'] (func_body | ';') ;

// interface declaration/binding
interf_decl: 'INTERF' (interf_name | interf_bind) '{' interf_main '}' ;
interf_name: 'IDENTIFIER' [generic_tag] ;
interf_bind: [generic_tag] 'FOR' types ['IS' type_list] ;
interf_main: ( func_decl | variant_decl )+ ;

// variant declaration
variant_decl: 'VARIANT' (variant_func | variant_method) ;
variant_func: '<' type_list '>' 'IDENTIFIER' func_body ;
variant_method: 'WHEN' [generic_spec] 'IDENTIFIER' extension func_decl ;

// decorator declaration
decor_decl: decor func_decl ;
decor: '@' ( '[' decor_expr (',' decor_expr)* ']' | decor_expr ) ;
decor_expr: named_value [ '(' args_list ')' ];

// operator overload
operator_decl: 'OPERATOR' ( '(' operator ')' | 'DELETE') [generic_tag] '(' args_decl_list ')' [types] (func_body | ';') ;


// BLOCK STATEMENTS (control flow, ctx management)
block_stmt: if_stmt
| select_stmt
| for_loop
| cond_loop
| with_block
| async_for_loop
;

// if statement
if_stmt: 'IF' [ var_decl ';' ] expr block elif_block* [else_block] ;
elif_block: 'ELIF' [ var_decl ';' ] expr block ;
else_block: 'ELSE' block ;

// select statement
select_stmt: 'SELECT' expr '{' select_block '}' ;
select_block: case+ [default] ;
case: 'CASE' expr_list [when_cond] ':' main [fallthrough] ;
fallthrough: 'FALLTHROUGH' ';' ;
default: 'DEFAULT' ':' main ;

// for loop
for_loop: 'FOR' (iterator | c_for) block [after_clause] ;
c_for: ['IDENTIFIER' '=' expr] ';' [expr] ';' [expr_stmt] ;

// conditional/infinite loop
cond_loop: 'LOOP' [ expr ] block ;
cond_loop_expr: [ var_decl ';' ] expr ;

// async-for loop
async_for_loop: 'ASYNC' 'FOR' iterator block [after_clause] ;

// context manager (with block)
with_block: 'WITH' with_var (',' with_var)* block [after_clause] ;
with_var: 'IDENTIFIER' '=' expr ;

// after clause
after_clause: 'AFTER' block ;


// STATEMENTS
// broken up for logical reasons - takes advantage of multiple solution parsing
stmt: ( var_decl
| expr_stmt
| continue_stmt
| break_stmt
| return_stmt
| yield_stmt
| delete_stmt
| resize_stmt
) ';' 
;

// variable declaration
var_decl: ('LET' | 'CONST') ['VOL'] (unpacking_var | std_var) ;
unpacking_var: '(' std_var ')' [extension] initializer ;
std_var: var_id (',' var_id );

// assignment or expression statement
expr_stmt: ['AWAIT'] mut_expr [(',' mut_expr)* assign_op expr_list ] ;
assign_op: ['+' | '-' | '*' | '/' | '%' | '~^' | '~/' | '|' | '&'] '=' | ':>' ; // also includes move operator

// variation of expression designed to be mutable/cause mutation
mut_expr: [unary_mut_prefix] ( 'IDENTIFIER' | '(' expr ')' ) trailer* [increm_decrem] ;
unary_mut_prefix: '*' | increm_decrem ;

// simple statements
continue_stmt: 'CONTINUE' ;
break_stmt: 'BREAK' ;
return_stmt: 'RETURN' [expr_list] ;
yield_stmt: 'YIELD' expr_list ;
delete_stmt: 'DELETE' expr_list ;

// resize a block of memory
resize_stmt: 'MAKE' expr 'TO' type_alloc ;


// EXPRESSIONS - basic unit of statements 
expr: suffixed_expr [cond_suffix] ;
cond_suffix: 'IF' suffixed_expr 'ELSE' suffixed_expr ;

suffixed_expr: simple_expr [expr_suffix] ;
expr_suffix: select_suffix+
| 'IS' ['!'] is_expr
| '..' simple_expr
| 'AS' types
| 'CASE' simple_expr
; 

// select expression
select_suffix: 'SELECT' '{' inline_case (',' inline_case)* '}' ;
inline_case: expr_list '=>' expr ;

// type comparison expression used in `is` pattern
is_expr: types [':' types] ;

// highest level expression
simple_expr: or ('~*' or)* ;

// logical operators
or: xor (('|' | '||')  xor)* ;
xor: and ('^' and)* ;
and: comparison (('&' | '&&') comparison)* ;

// comparisons
comparison: not (comparison_op not)*;
comparison_op: '>' | '<' | '>=' | '<=' | '==' | '!=' ;
not: ['!'] shift ;

// binary shifts
shift: arithmetic (shift_op arithmetic)* ;
shift_op: '>' '>' | '<' '<';

// arithmetic
arithmetic: term (('+' | '-') term)* ;
term: factor (('*' | '/' | '%' | '~/') factor)* ;
factor: unary_atom ('~^' unary_atom)*;

// unary operators
unary_atom: ('&' ['CONST'] | '-' | '~' | increm_decrem | '*' ) atom
| atom [increm_decrem]
;


// ATOMS - basic unit of expressions
atom: [ 'AWAIT' ] base trailer*
| heap_alloc
| match_expr
;

trailer: '[' (expr [slice] | slice) ']'
| '(' args_list ')'
| '.' ( 'IDENTIFIER' | 'INT_LITERAL' )
| '{' [init_list] '}'
| '?'
| generic_spec
| static_get
;

// trailer components
slice: ':' [expr [':' expr] | ':' expr] ;
args_list: [arg (',' arg)*] ;
arg: expr named_suffix;
named_suffix: '=' expr ;
init_list: ['...' expr ','] 'IDENTIFIER' initializer (',' 'IDENTIFIER' initializer)* ;

// allocate on the heap
heap_alloc: 'MAKE' ('FOR' type_alloc | expr) ;
type_alloc: types ['*' expr] ;

// the match expression
match_expr: 'MATCH' match_join ( match_relate_type | match_relate_value) ;
match_join: '<' ('&' '&' | '|' '|' | 'INT_LITERAL') ',' ;
match_relate_type: 'IS' ['!'] '>' expr 'TO' '{' type_list '}' ;
match_relate_value: ('==' | '!=') '>' expr 'TO' '{' expr_list '}' ;


// BASES - lowest component of an atom
base: 'INT_LITERAL'
| 'FLOAT_LITERAL'
| 'BOOL_LITERAL'
| 'STRING_LITERAL'
| 'CHAR_LITERAL'
| 'HEX_LITERAL'
| 'BIN_LITERAL'
| 'OCT_LITERAL'
| 'POWER_LITERAL'
| 'THIS'
| 'IDENTIFIER'
| 'NULL'
| array_dict_builder
| list_builder
| comprehension
| tupled_expr
| lambda
| super_call
| vec_builder
;

// collection builders (comprehensions & literals)
array_dict_builder: '{' expr [array_builder | dict_builder] '}' ;
array_builder: (',' expr)* | comp_suffix ;
dict_builder: ':' expr [(',' expr ':' expr)+ | comp_suffix] ;
comp_suffix: 'FOR' iterator [when_cond];

// tupled expressions (generate tuples or sub expressions)
tupled_expr: '(' expr_list ')' ;

// inline functions (lambdas)
lambda: ['ASYNC'] ('|' args_decl_list '|' | '||') lambda_body ;
lambda_body: '=>' expr
| '{' [main] '}'
;

// access the super form of a type
super_call: 'SUPER' '(' [ 'IDENTIFIER' static_get* [ generic_spec ] ] ')' ;

// vector builder (fills and const arrays)
vec_builder: '<' expr [ ':' 'INT_LITERAL' ] '>' ;


// DATA TYPES - data type literals
types: core_types | ref_type | named_value ;

// pure-value types
core_types: prim_types
| collection_types
| func_type
| tuple_type
| vector_type
;

prim_types: 'BOOL_TYPE'
| 'FLOAT_TYPE'
| 'INT_TYPE'
| 'STRING_TYPE'
| 'CHAR_TYPE'
| 'BYTE_TYPE'
| 'LONG_TYPE'
| 'DOUBLE_TYPE'
| 'SHORT_TYPE'
| 'ANY_TYPE'
;

collection_types: '[' collection_type_suffix ;
collection_type_suffix: ']' expr
| expr ']'
| ':' expr ']'
;

func_type: ('FUNC' | 'ASYNC') '(' func_arg_types ')' '(' [ type_list ] ')' ;
func_arg_types: [ func_arg_type (',' func_arg_type)* ] [func_arg_indef] ;
func_arg_type: types ['~'] ;
func_arg_indef: '...' [types] ;

tuple_type: '(' tuple_type_list ')' ;
tuple_type_list: types (',' types)+ ;

vector_type: '<' 'INT_LITERAL' '>' types ;

// reference-like types (might be ambiguous!)
ref_type: ['CONST'] ['OWN'] '&' (core_types | named_value) ['?'] ;


// COMMON CONSTRUCTIONS - common structures used repeatedly in grammar
// a series of types delimited by commas
type_list: types (',' types)* ;

// a series of expressions delimited by commas
expr_list: expr (',' expr)* ;

// argument declaration syntax
args_decl_list: [ decl_arg next_decl_arg | indef_decl_arg ] ;
next_decl_arg: [',' ( decl_arg next_decl_arg | indef_decl_arg ) ] ;
decl_arg: ['CONST'] ['VOL'] 'IDENTIFIER' (',' 'IDENTIFIER')* extension [initializer] ;
indef_decl_arg: '...' ['CONST'] 'IDENTIFIER' [extension] ;

// general purpose initializer
initializer: '=' expr ;

// iterator syntax
iterator: iter_var (',' iter_var)* 'IN' expr ;
iter_var: 'IDENTIFIER' | unpacking_iter_var ;
tuple_iter_vars: '(' iter_var (',' iter_var)+ ')' ;

// type extension
extension: ':' types ;

// function body
func_body: ('{' [main] '}'
| '=>' expr_list ';'
)
;

// standard block
block: '{' [main] '}' ;

// operators used in operator overloading (and possibly other situations)
operator: '<' ['<'] | '>' ['>'] | '+' | '-' | '*' | '/' | '%' | '<=' | '>=' | '==' | '!='
| '~^' | '~*' | '~/' | '&' ['&'] | '|' ['|'] | '^' | '~' | '[' [ ':' ] ']' | '.' '.' | '!';

// generic tag (placed after several block declarations)
generic_tag: '<' generic (',' generic)* '>' ;
generic: ['VSIZE'] 'IDENTIFIER' [':' type_list] ;

// generic specifier
generic_spec: '<' generic_arg (',' generic_arg)* '>' ;
generic_arg: types | 'VSIZE' 'INTEGER_LITERAL' ;

// static get call
static_get: get_op 'IDENTIFIER' ;
get_op: ':' ':' ;

// a general named value accessor
named_value: 'IDENTIFIER' (static_get | generic_spec)* ;

// increment and decrement operators
increm_decrem: '++' | '--' ;

// expression when condition
when_cond: 'WHEN' expr ;
