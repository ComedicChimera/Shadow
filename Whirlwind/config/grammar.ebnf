// WHIRLWIND STANDARD GRAMMAR
whirlwind: ( variable_decl ';'
| block_decl
| include_stmt ';'
| export_decl
)+ ;

main: ( func_decl
| block_stmt 
| stmt
| subscope
)+ ;

subscope: '{' main '}' ;

// include statement
include_stmt: 'INCLUDE' ( pkg_name ['STRING_LITERAL'] | include_set 'FROM' pkg_name ) ;
pkg_name: [pkg_back_move] 'IDENTIFIER' ('.' 'IDENTIFIER' | pkg_back_move )* ;
pkg_back_move: '.' '.' ;
include_set: '{' 'IDENTIFIER' (',' 'IDENTIFIER')* '}' ;


// TYPE CLASSES
// type class declaration
type_class_decl: 'TYPE' 'IDENTIFIER' [impl] '{' type_class_main+ '}' ;
type_class_main: ['PRIV'] ( variable_decl ';' 
| func_decl
| method_template
| variant_decl
| constructor_decl
) ;

// method template
method_template: 'TEMPLATE' '<' template (',' template)* '>' func_decl ;

// constructor declaration
constructor_decl: 'CONSTRUCTOR' '(' args_decl_list ')' func_body ;

// implementation clause
impl: ':' 'IDENTIFIER' (',' 'IDENTIFIER')* ;


// BLOCK DECLARATIONS
block_decl: func_decl
| interface_decl
| type_class_decl
| struct_decl
| template_decl
| variant_decl
| decor_decl
| enum_decl
;

// function declaration
func_decl: ('FUNC' | 'ASYNC') 'IDENTIFIER' '(' args_decl_list ')' [ types ] (func_body | ';') ;

// interface declaration
interface_decl: 'INTERFACE' 'IDENTIFIER' '{' interface_main '}' ;
interface_main: func_decl+ ;

// struct declaration
struct_decl: 'STRUCT' 'IDENTIFIER' '{' struct_main '}' ;
struct_main: (struct_var ';')+ ;
struct_var: 'IDENTIFIER' (',' 'IDENTIFIER')* ':' types ;

// template declaration
template_decl: 'TEMPLATE' '<' template (',' template)* '>' block_decl ;
template: 'IDENTIFIER' [':' type_list] ;

// variant declaration
variant_decl: 'VARIANT' ( variant | variant_list ) 'IDENTIFIER' func_body ;
variant_list: '(' variant (',' variant)+ ')' ;
variant: '<' type_list '>' ;

// decorator declaration
decor_decl: decor func_decl ;
decor: '#' '[' expr (',' expr)* ']' ;

// pure enum declaration
enum_decl: 'ENUM' 'IDENTIFIER' '{' enum_main '}' ;
enum_main: 'IDENTIFIER'+ ;


// BLOCK STATEMENTS (control flow, context managers and except blocks)
block_stmt: if_stmt
| select_stmt
| for_loop
| except_block
| from_block
;

// if statement
if_stmt: 'IF' '(' expr ')' block elif_block* [else_block] ;
elif_block: 'ELIF' '(' expr ')' block ;
else_block: 'ELSE' block ;

// select statement
select_stmt: 'SELECT' '(' expr ')' '{' select_block '}' ;
select_block: case+ [default] ;
case: 'CASE' expr (',' expr)* ':' main ;
default: 'DEFAULT' ':' main ;

// for loop
for_loop: 'FOR' [for_body] block [after_clause] ;
for_body: '(' (c_for | iterator | expr) ')' ;
c_for: ['IDENTIFIER' '=' expr] ';' [expr] ';' [expr | assignment] ;

// except block
except_block: 'EXCEPT' '(' handle_block+ ')' block [after_clause] ;
handle_block: expr ':' '(' ['IDENTIFIER'] ')' '=>' block ;

// from block
from_block: 'FROM' ( from_stmt ( from_except_clause | ';' ) | from_body [from_except_clause] [after_clause] ) ;
from_stmt: 'IDENTIFIER' ('.' 'IDENTIFIER')* '->' 'IDENTIFIER' ;
from_body: '(' variable_decl ')' block ;
from_except_clause: 'EXCEPT' block ;

// export declaration
export_decl: 'EXPORT' ( block_decl
| include_stmt ';'
| variable_decl ';'
);

// after clause
after_clause: 'AFTER' block ;


// STATEMENTS
// broken up for logical reasons - takes advantage of multiple solution parsing
stmt: ( variable_decl
| assignment
| expr
| throw_stmt 
| continue_stmt
| break_stmt
| delete_stmt
| return_stmt
| yield_stmt
) ';' 
;

// variable declaration
variable_decl: ['VOL'] ('LET' | 'CONST') var extension variable_initializer  ;
var: '(' var_id (',' var_id)* ')'
| 'IDENTIFIER'
;
var_id: 'IDENTIFIER' extension variable_initializer
| '_'
;

variable_initializer: [ '=' expr
| ':=' expr
] ;

// variable assignment
assignment: assign_var (',' assign_var)* assign_op expr (',' expr)* ;
assign_var: '*'* ( 'IDENTIFIER' | 'THIS' | '_' ) trailer* ;

assign_op: [ '+'
| '-'
| '*'
| '/'
| '%'
| '^'
| '<' '<'
| '>' '>'
| 'AND'
| 'OR'
| 'XOR'
] 
'=' ;

// simple statements
continue_stmt: 'CONTINUE' ;
break_stmt: 'BREAK' ;
throw_stmt: 'THROW' expr ;
delete_stmt: 'DELETE' 'IDENTIFIER' (',' 'IDENTIFIER')* ;
return_stmt: 'RETURN' [expr (',' expr)*] ;
yield_stmt: 'YIELD' expr (',' expr)* ;


// EXPRESSIONS - basic unit of statements 
expr: or [expr_extension] ;
expr_extension: '?' or ':' or
| ('??' or)+
; 

// logical operators
or: xor ('OR' xor)* ;
xor: and ('XOR' and)* ;
and: comparison ('AND' comparison)* ;

// comparisons
comparison: not (comparison_op not)*;
comparison_op: '>' | '<' | '>=' | '<=' | '==' | '!=' ;
not: ['!'] shift ;

// binary shifts
shift: arithmetic (shift_op arithmetic)* ;
shift_op: '>' '>' | '<' '<';

// arithmetic
arithmetic: term (('+' | '-') term)* ;
term: factor (('*' | '/' | '%' | '~/') factor)* ;
factor: unary_atom ('~^' unary_atom)*;

// unary operators
unary_atom: ('REF' | '&' ['VOL'] | '-' | '~' | '++' | '--' | '*'+) atom
| atom ['++' | '--']
;


// ATOMS - basic unit of expressions
atom: [ 'NEW' ] [ 'AWAIT' ] base trailer*
| comprehension trailer*
| heap_alloc
;

trailer: '[' (expr [slice] | slice) ']'
| '(' args_list ')'
| '{' init_list '}'
| '.' 'IDENTIFIER'
| '->' 'IDENTIFIER'
| template_spec
| static_get
;

// trailer components
slice: ':' [expr [':' expr] | ':' expr] ;
args_list: [expr (',' expr)*] ;
init_list: 'IDENTIFIER' initializer (',' 'IDENTIFIER' initializer)* ;
static_get: get_op 'IDENTIFIER' ;
get_op: ':' ':' ;

// for comprehension
comprehension: 'FOR' '(' expr [':' expr] '|' iterator ['WHERE' expr] ')' ;

// allocate a type on the heap
heap_alloc: 'NEW' '(' alloc_body ')' ;
alloc_body: types [',' expr] ;


// BASES - lowest component of an atom
base: 'INTEGER_LITERAL'
| 'FLOAT_LITERAL'
| 'BOOL_LITERAL'
| 'STRING_LITERAL'
| 'CHAR_LITERAL'
| 'HEX_LITERAL'
| 'BINARY_LITERAL'
| 'THIS'
| 'IDENTIFIER'
| 'NULL'
| array
| list
| dict
| tuple
| closure
| sub_expr
| type_cast
| partial_func
;

// collection types
array: '{' expr ( ',' expr )* '}' ;
list: '[' expr ( ',' expr )* ']' ;
dict: '{' expr ':' expr (',' expr ':' expr)* '}' ;

// tuple literal
tuple: '(' expr (',' expr)+ ')' ;

// inline functions (closures)
closure: '|' args_decl_list '|' closure_body ;
closure_body: '=>' expr
| '{' [main] '}'
;

// sub expr declared so that it could be easier to parse
sub_expr: '(' expr ')' ;

// casting syntax includes call
type_cast: 'CAST' '<' types '>' '(' expr ')' ;

// convert function to partial function
partial_func: '|' expr partial_arg (',' partial_arg)* ')' ;
partial_arg: '_'
| expr
;


// DATA TYPES - data type literals
types: ['REF'] '*'* ( base_types
| 'IDENTIFIER' [template_spec]
)
;

base_types: simple_types
| collection_types
| func_types
| tuple_type
;

simple_types: 'BOOL_TYPE'
| 'FLOAT_TYPE'
| 'INT_TYPE'
| 'STRING_TYPE'
| 'CHAR_TYPE'
| 'BYTE_TYPE'
| 'LONG_TYPE'
| 'DOUBLE_TYPE'
| 'VOID_TYPE'
;

collection_types: 'ARRAY_TYPE' '[' types ',' expr ']'
| 'LIST_TYPE' '[' types ']'
| 'DICT_TYPE' '[' types ',' types ']'
;

func_types: ('FUNC' | 'ASYNC') '(' func_arg_types ')' '(' [ type_list ] ')' ;
func_arg_types: [ func_arg_type (',' func_arg_type)* ] [func_arg_indef] ;
func_arg_type: types ['~'] ;
func_arg_indef: '...' [types] ;

tuple_type: '(' tuple_type_list ')' ;
tuple_type_list: types (',' types)+ ;


// COMMON CONSTRUCTIONS - common structures used repeatedly in grammar
type_list: types (',' types)* ;

args_decl_list: [ decl_arg (',' decl_arg)* [',' ending_arg] | ending_arg ] ;
decl_arg: ['CONST'] 'IDENTIFIER' (',' 'IDENTIFIER')* extension [initializer] ;
ending_arg: '...' 'IDENTIFIER' extension ;

initializer: '=' expr ;
iterator: 'IDENTIFIER' (',' 'IDENTIFIER')* '<-' expr ;
template_spec: '<' type_list '>' ;

// type extension
extension: [':' types] ;

// function body
func_body: [func_guard] ('{' [main] '}'
| '=>' expr (',' expr)* ';'
)
;

// function guard
func_guard: 'WHERE' '(' expr ')' ;

// standard block
block: '{' [main] '}'
| stmt
;
