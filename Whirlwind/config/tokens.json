{
  "STRING_LITERAL": "\"(?:[^\"\\\\']|\\\\.)*\"",
  "CHAR_LITERAL": "'(?:[^\"\\\\']|\\\\.)*'",
  "FLOAT_LITERAL": "\\d+\\.\\d+",

  ":=": "\\:=",
  "++": "\\+\\+",
  "--": "\\-\\-",
  "#": "#",

  "...": "\\.{3}",
  "??": "\\?\\?",
  "~/": "~/",
  "~^": "~\\^",
  "?": "\\?",
  ".": "\\.",
  "$": "\\$",
  ":": "\\:",
  ",": ",",
  "!=": "!=",
  "!": "!",
  "AND": "&&",
  "OR": "\\|\\|",
  "XOR": "\\^\\^",
  "|": "\\|",
  "<-": "<-",
  "->": "->",
  "+": "\\+",
  "-": "-",
  "*": "\\*",
  "/": "/",
  "%": "%",
  "==": "==",
  ">=": ">=",
  "<=": "<=",
  "=>": "=>",
  "=": "=",
  ";": ";",
  ">": ">",
  "<": "<",
  "&": "&",
  "@": "@",
  "~": "~",

  "(": "\\(",
  ")": "\\)",
  "{": "\\{",
  "}": "\\}",
  "[": "\\[",
  "]": "\\]",

  "IF": "\\bif\\b",
  "ELIF": "\\belif\\b",
  "ELSE": "\\belse\\b",
  "FOR": "\\bfor\\b",
  "SELECT": "\\bselect\\b",
  "CASE": "\\bcase\\b",
  "DEFAULT": "\\bdefault\\b",
  "BREAK": "\\bbreak\\b",
  "CONTINUE": "\\bcontinue\\b",
  "WHERE": "\\bwhere\\b",

  "RETURN": "\\breturn\\b",
  "YIELD":  "\\byield\\b",

  "EXCEPT": "\\bexcept\\b",
  "THROW": "\\bthrow\\b",

  "DELETE": "\\bdelete\\b",
  "FROM": "\\bfrom\\b",
  "VOL": "\\bvol\\b",

  "FUNC": "\\bfunc\\b",
  "ASYNC": "\\basync\\b",
  "AWAIT": "\\bawait\\b",
  "VARIANT": "\\bvariant\\b",
  "CONSTRUCTOR": "\\bconstructor\\b",

  "TYPE": "\\btype\\b",
  "STRUCT": "\\bstruct\\b",
  "INTERFACE": "\\binterface\\b",
  "TEMPLATE": "\\btemplate\\b",
  "PRIV": "\\bpriv\\b",

  "INCLUDE": "\\binclude\\b",
  "EXPORT": "\\bexport\\b",

  "THIS": "\\bthis\\b",
  "NEW": "\\bnew\\b",
  "CAST": "\\bcast\\b",

  "STRING_TYPE": "\\bstr\\b",
  "FLOAT_TYPE": "\\bu?float\\b",
  "BOOL_TYPE": "\\bbool\\b",
  "CHAR_TYPE": "\\bu?char\\b",
  "BYTE_TYPE": "\\bbyte\\b",
  "LONG_TYPE": "\\bu?long\\b",
  "DOUBLE_TYPE": "\\bu?double\\b",
  "INT_TYPE": "\\bu?int\\b",
  "VOID_TYPE": "\\bvoid\\b",

  "ARRAY_TYPE": "\\barray\\b",
  "LIST_TYPE": "\\blist\\b",
  "DICT_TYPE": "\\bdict\\b",

  "BOOL_LITERAL": "\\b(true|false)\\b",
  "HEX_LITERAL": "0x[0-9A-F]+",
  "BINARY_LITERAL": "0b[10]+",
  "IDENTIFIER": "[^\\d\\W]\\w*",
  "INTEGER_LITERAL": "\\d+"
}
