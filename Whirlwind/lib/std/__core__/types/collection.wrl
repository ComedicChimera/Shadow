include { Iterable, Iterator } from iter;

// GENERAL COLLECTIONS
interf Collection<T> {
	func at(ndx: int) T;

	func len() int;
}

struct CollectionIterator<T> {
	col: *Collection<T>;
	pos: int;

	constructor(col: *Collection<T>) {
		this.col = col;
		this.pos = 0;
	}
}

interf<T> for CollectionIterator<T> is Iterator<T> {
	func next() (T, bool) {
		if (this.pos < this.col.len())
			return this.col.at(this.pos), ++this.pos < this.col.len();

		return null, false;
	}
}

// ARRAYS
interf<T> for []T is Collection<T>, Iterable<T> {
	func len() int => this.size;

	func iter() Iterator<T>
		=> new CollectionIterator(&this);

	// bounds check inserted by generator
	func at(ndx: int) T 
		=> this[ndx];
}