interf Iterator<T> {
	func next() (T, bool);
}

interf Iterable<T> {
	func iter() Iterator<T>;

	func toArray() []T
		=> {v | v <- this};

	func toList() [T]
		=> [v | v <- this];

	func toDict<K, V>(keyFunc: func(T)(K), valFunc: func(T)(V)) [K: V]
		=> {keyFunc(x): valFunc(x) | x <- this};

	func each(f: func(T)()) {
		for (item <- this)
			f(item);
	}

	func map<R>(f: func(T)(R)) Iterable<R>
		=> new MapIterator(this.iter(), f) as IterableMask<T>;

	func filter(f: func(T)(bool)) Iterable<T>
		=> new FilterIterator(this.iter(), f) as IterableMask<T>;

	func concat(it: Iterator<T>) Iterable<T>
		=> new ConcatIterator(this.iter(), it) as IterableMask<T>;

	func enumerate() Iterable<T>
		=> new EnumeratedIterator(this.iter) as IterableMask<T>;
}

type IterableMask<T> Iterator<T>;

interf<T> for IterableMask<T> is Iterable<T> {
	func iter() Iterator<T>
		=> this as Iterator<T>
}

struct MapIterator<T, R> {
	base: Iterator<T>;
	fn: func(T)(R);

	constructor(b: Iterator<T>, f: func(T)(R)) {
		this.base = b;
		this.fn = f;
	}
}

interf<T, R> for MapIterator<T, R> is Iterator<R> {
	func next() (R, bool) {
		let (v, b) = this.base.next();

		return this.fn(v), b;
	}
}

struct FilterIterator<T> {
	base: Iterator<T>;
	fn: func(T)(bool);

	constructor(b: Iterator<T>, f: func(T)(bool)) {
		this.base = b;
		this.fn = f;
	}
}

interf<T> for FilterIterator<T> is Iterator<T> {
	func next() (T, bool) {
		let (v, b) = this.base.next();

		for (b) {
			if (this.fn(v))
				return v, true;

			v, b = this.base.next();
		}

		return null, false;
	}
}

struct ConcatIterator<T> {
	first, second: Iterator<T>;

	constructor(first, second: Iterator<T>) {
		this.first = first;
		this.second = second;
	}
}

interf<T> for ConcatIterator<T> is Iterator<T> {
	func next() (T, bool) {
		let (v, b) = this.first.next();

		if (b)
			return v, b;

		v, b = this.second.next();

		if (b)
			return v, b;

		return null, false;
	}
}

struct EnumeratedIterator<T> {
	base: Iterator<T>;
	pos: int;

	constructor(b: Iterator<T>) {
		this.base = b;
		this.pos = 0;
	}
}

interf<T> for EnumeratedIterator<T> is Iterator<T> {
	func next() (T, bool) {
		let v, b = this.base.next();

		return (v, this.pos++), b;
	}
}
