// TYPES

#impl "array"
struct __array<T> {
	p: *T;
	size: uint;
}

#impl "list"
struct __list<T> {
	p: dyn* T;
	size: uint;
	cap: uint;
}

#impl "dict"
struct __dict<K, V> {
	kvList: dyn* (K, V);
	kvSize, kvCap: uint;

	hashTable: dyn *int;
	htSize, htCap: uint;

	nextInsertNdx: uint;
}

#impl "string"
struct __string {
	chars: *char;
	size: uint;
}


// FRIEND FUNCTIONS
#friend "string"
func __concat(a, b: str) str {
	let np: *char;
	*np = *a.chars;

	// *(np + a.size) = *b.chars;

	return new __string { chars = np, size = a.size + b.size } as str;
}

#friend "array"
func __concatA<T>(a, b: []T) {

}

#friend "list"
func __concatL<T>(a, b: [T]) {

}

// HELPER FUNCTIONS
/*func __range(l, h, step: int) []int {
	let size = h - l if step == 1 else l - h;
	let arr = __malloca(4 * size) as []int;		

	let n = l;
	for (i = 0; i < size; i++) {
		arr[i] = n;
		n += step;
	}

	return arr;
}*/

// INTRINSIC FUNCTIONS
#intrinsic
func __malloca(size: uint) *any;

#intrinsic
func __sizeof(data: any) uint;