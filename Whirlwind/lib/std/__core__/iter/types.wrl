export {
	interf Iterable<T> {
		func iter() Iterator<T>;

		func map<R>(fn: func(T)(R)) Iterable<R>
			=> new MapIterator(this.iter(), fn) as IterableAdapter<T>;

		func filter(fn: func(T)(bool)) Iterable<T>
			=> new FilterIterator(this.iter(), fn) as IterableAdapter<R>;
	}

	type IterableAdapter<T> Iterator<T>;

	interf<T> for IterableAdapter<T> is Iterable<T> {
		func iter() Iterator<T> => this as Iterator<T>;
	}

	interf Iterator<T> {
		func next() (T, bool);
	}

	struct MapIterator<T, R> {
		it: Iterator<T>;
		fn: func(T)(R);
	}

	interf<T, R> for MapIterator<T, R> is Iterator<R> {
		func next() (R, bool) {
			let (v, e) = this.it.next();
		
			if (e)
				return this.fn(v), true;

			return null, false;
		}
	}

	struct FilterIterator<T> {
		it: Iterator<T>;
		fn: func(T)(bool);
	}

	interf<T> for FilterIterator<T> is Iterator<T> {
		func next() (T, bool) {
			let (v, e) = this.it.next();

			for (e && !this.fn(v)) {
				v, e = this.it.next();
			}

			if (e)
				return v, true;

			return null, false;	
		}
	}
}
