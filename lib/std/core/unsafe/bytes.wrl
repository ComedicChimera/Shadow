!! nocompile

import __sizeof, __get_kind_of from core::runtime

export of
    // `get_bytes` converts any given type to its corresponding byte array
    #introspect
    func get_bytes(a: any) []byte do
        let bytearray = filled(0b00, a.size)

        for i in 0..a.size-1 do
            bytearray[i] = *access_offset(a.ptr, i)

        return bytearray

    // `cast_bytes` takes a byte array and casts it to its type if such a
    // cast/interpretation is valid (by size).  
    #introspect
    func cast_bytes<T>(bytearray: []byte) Option<T> do
        let size = __sizeof(null as T)

        if size != bytearray.len() do
            return None

        let a = __stdtypeset{
            ptr=bytearray.ref,
            kind=__get_kind_of() as T,
            size=size
        }

        return Some(a as T)

    // `bit_cast` casts one kind of pointer to another kind of pointer
    // disregarding typing rules (with the exception of ownership)
    func bit_cast<T, R>(src: &T) &R do
        return from_addr(get_addr(src))

