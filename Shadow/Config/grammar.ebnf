// temporary
main: stmt+ ;
stmt: expr ';' ;
expr: unary_atom ;

unary_atom: ('&' | '-' | '++' | '--' | '*'+ ) atom
| atom ['++' | '--']
;

// ATOMS - basic unit of expressions
atom: [ 'NEW' ] [ 'AWAIT' ] base trailer*
| '(' expr ')'
| comprehension trailer*
;

trailer: '[' (expr [slice] | slice) ']'
| '(' args_list ')'
| '{' init_list '}'
| '.' base
| '|>' aggr_expr '|'
| '...'
;

// trailer components
slice: ':' [expr [':' expr]] ;
args_list: [['...'] expr [initializer] (',' ['...'] expr [initializer])*]  ;
init_list: (IDENTIFIER initializer)+ ;

// aggregator
aggr_expr: expr
| ... aggr_op
;
aggr_op: '+' | '-' | '*' | '/' | '^' | '%' | '&&' | '||' | '^^' 
| shifts
| comparison_ops
;

// for comprehension
comprehension: 'FOR' '(' expr iterator '=>' expr ['IF' expr] ')' ;

// BASES - lowest component of an atom
base: 'INTEGER_LITERAL'
| 'FLOAT_LITERAL'
| 'BOOL_LITERAL'
| 'STRING_LITERAL'
| 'CHAR_LITERAL'
| 'HEX_LITERAL'
| 'BINARY_LITERAL'
| 'NULL'
| 'VALUE'
| 'THIS'
| 'IDENTIFIER'
| array
| list
| map
| atom_types
| inline_function
;

array: '{' [ expr ( ',' expr )* ] '}' ;
list: '[' [ expr ( ',' expr )* ] ']' ;
map: '{' [ expr ':' expr (',' expr ':' expr)* ] '}' ;

inline_function: 'FUNC' '(' args_decl_list ')' func_body
| 'ASYNC' '(' args_decl_list ')' func_body
;

// DATA TYPES - data type literals
types: atom_types
| IDENTIFIER
;

atom_types: simple_types
| collection_types
| func_types
;

simple_types: 'BOOL_TYPE'
| 'FLOAT_TYPE'
| 'INT_TYPE'
| 'STRING_TYPE'
| 'CHAR_TYPE'
| 'DATA_TYPE'
| 'BYTE_TYPE'
| 'LONG_TYPE'
;

collection_types: 'ARRAY_TYPE' '[' types ',' expr ']'
| 'LIST_TYPE' '[' types ']'
| 'MAP_TYPE' '[' types ',' types ']'
;

func_types: 'FUNC' '(' args_decl_list ')' '(' type_list ')'
| 'ASYNC' '(' args_decl_list ')' '(' type_list ')'
;

// COMMON CONSTRUCTIONS - common structures used repeatedly in grammar
type_list: types (',' types)* ;
args_decl_list: (['...'] ('$' | '@' | '&') IDENTIFIER initializer)* ;
initializer: '=' expr ;
iterator: '|' 'IDENTIFIER' (',' 'IDENTIFIER')* '|' ;

func_body: '{' main '}'
| '=>' expr
| stmt 
;
