type Point {
    x, y: int
}

type Option<T>
    | Some(T)
    | None

func println<T>(x: T) do
    ...

const message = `
test test
test
`

func main do
    let x = 120

    match x to
        case 12 do
            println("What?")
        case 120 do
            println(`expected""''`)


func radix_sort(list: [uint]) [uint] do
    let buckets = [null as [uint] for _ in 1..10]
    let max = list.max()

    for it = 0; 10 ~^ it < max; it++ do
        for item in list do
            buckets[item ~/ (10 ~^ it) % 10].push(item)

        list = buckets.flatten().to_list()
        
        for i = 0; i < 10; i++ do
            buckets[i].clear()

    return list

type LLNode {
    value: int
    next: own& LLNode
}

func ll_range(val: int) own &LLNode do
    if val == 0 do
        return make LLNode{value=val}

    return make LLNode{value=val, next=ll_range(val - 1)}

func main do
    let ll = ll_range(10)

    let p = ll
    for i = 0; i < 11; i++ do
        println(p.value)
        p = p.next
